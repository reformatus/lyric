// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    banks,
    songs,
    songsUuid,
    assets,
    assetSourceUrl,
    cues,
    cuesUuid,
    preferenceStorage,
    songsFts,
    songsAi,
    songsAd,
    songsAu,
  ];
  late final Shape0 banks = Shape0(
    source: i0.VersionedTable(
      entityName: 'banks',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_14,
        _column_15,
        _column_16,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 songs = Shape1(
    source: i0.VersionedTable(
      entityName: 'songs',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index songsUuid = i1.Index(
    'songs_uuid',
    'CREATE UNIQUE INDEX songs_uuid ON songs (uuid)',
  );
  late final Shape2 assets = Shape2(
    source: i0.VersionedTable(
      entityName: 'assets',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_26, _column_27, _column_28, _column_29],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index assetSourceUrl = i1.Index(
    'asset_source_url',
    'CREATE UNIQUE INDEX asset_source_url ON assets (source_url)',
  );
  late final Shape3 cues = Shape3(
    source: i0.VersionedTable(
      entityName: 'cues',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_19,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index cuesUuid = i1.Index(
    'cues_uuid',
    'CREATE UNIQUE INDEX cues_uuid ON cues (uuid)',
  );
  late final Shape4 preferenceStorage = Shape4(
    source: i0.VersionedTable(
      entityName: 'preference_storage',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY("key")'],
      columns: [_column_33, _column_34],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 songsFts = Shape5(
    source: i0.VersionedVirtualTable(
      entityName: 'songs_fts',
      moduleAndArgs:
          'fts5(title, opensong, composer, lyricist, translator, content=\'songs\', content_rowid=\'id\', tokenize=\'trigram remove_diacritics 1\')',
      columns: [_column_35, _column_36, _column_37, _column_38, _column_39],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Trigger songsAi = i1.Trigger(
    'CREATE TRIGGER songs_ai AFTER INSERT ON songs BEGIN INSERT INTO songs_fts ("rowid", title, opensong, composer, lyricist, translator) VALUES (new.id, new.title, new.opensong, new.composer, new.lyricist, new.translator);END',
    'songs_ai',
  );
  final i1.Trigger songsAd = i1.Trigger(
    'CREATE TRIGGER songs_ad AFTER DELETE ON songs BEGIN INSERT INTO songs_fts (songs_fts, "rowid", title, opensong, composer, lyricist, translator) VALUES (\'delete\', "rowid", old.title, old.opensong, old.composer, old.lyricist, old.translator);END',
    'songs_ad',
  );
  final i1.Trigger songsAu = i1.Trigger(
    'CREATE TRIGGER songs_au AFTER UPDATE ON songs BEGIN INSERT INTO songs_fts (songs_fts, "rowid", title, opensong, composer, lyricist, translator) VALUES (\'delete\', "rowid", old.title, old.opensong, old.composer, old.lyricist, old.translator);INSERT INTO songs_fts ("rowid", title, opensong, composer, lyricist, translator) VALUES (new.id, new.title, new.opensong, new.composer, new.lyricist, new.translator);END',
    'songs_au',
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get logo =>
      columnsByName['logo']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get tinyLogo =>
      columnsByName['tiny_logo']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get legal =>
      columnsByName['legal']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get aboutLink =>
      columnsByName['about_link']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get contactEmail =>
      columnsByName['contact_email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get baseUrl =>
      columnsByName['base_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get parallelUpdateJobs =>
      columnsByName['parallel_update_jobs']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get amountOfSongsInRequest =>
      columnsByName['amount_of_songs_in_request']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get noCms =>
      columnsByName['no_cms']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get songFields =>
      columnsByName['song_fields']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isEnabled =>
      columnsByName['is_enabled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isOfflineMode =>
      columnsByName['is_offline_mode']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get lastUpdated =>
      columnsByName['last_updated']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'uuid',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<i2.Uint8List> _column_2(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'logo',
      aliasedName,
      true,
      type: i1.DriftSqlType.blob,
    );
i1.GeneratedColumn<i2.Uint8List> _column_3(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'tiny_logo',
      aliasedName,
      true,
      type: i1.DriftSqlType.blob,
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'legal',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'about_link',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'contact_email',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'base_url',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'parallel_update_jobs',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'amount_of_songs_in_request',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_12(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'no_cms',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("no_cms" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'song_fields',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_14(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_enabled',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_enabled" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<bool> _column_15(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_offline_mode',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_offline_mode" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<DateTime> _column_16(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_updated',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sourceBank =>
      columnsByName['source_bank']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get contentMap =>
      columnsByName['content_map']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get opensong =>
      columnsByName['opensong']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get composer =>
      columnsByName['composer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get lyricist =>
      columnsByName['lyricist']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get translator =>
      columnsByName['translator']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get keyField =>
      columnsByName['key_field']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get userNote =>
      columnsByName['user_note']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'source_bank',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES banks (uuid)',
      ),
    );
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'content_map',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'title',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'opensong',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'composer',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'lyricist',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'translator',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'key_field',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'user_note',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get songUuid =>
      columnsByName['song_uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sourceUrl =>
      columnsByName['source_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fieldName =>
      columnsByName['field_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get content =>
      columnsByName['content']! as i1.GeneratedColumn<i2.Uint8List>;
}

i1.GeneratedColumn<String> _column_26(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'song_uuid',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'source_url',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'field_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<i2.Uint8List> _column_29(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'content',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get cueVersion =>
      columnsByName['cue_version']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_30(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_31(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'cue_version',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_32(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'content',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get key =>
      columnsByName['key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get value =>
      columnsByName['value']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'key',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_34(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'value',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape5 extends i0.VersionedVirtualTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get opensong =>
      columnsByName['opensong']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get composer =>
      columnsByName['composer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get lyricist =>
      columnsByName['lyricist']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get translator =>
      columnsByName['translator']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'title',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_36(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'opensong',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_37(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'composer',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_38(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'lyricist',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_39(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'translator',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2),
);
